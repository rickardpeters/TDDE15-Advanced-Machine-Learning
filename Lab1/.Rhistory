source("~/.active-rstudio-document")
bnlearn
install.package(bnlearn)
install.packages(bnlearn)
install.packages("bnlearn")
?bnlearn
??bnlearn
library(bnlearn)
data <- data("asia")
data("asia")
?hc
hc <- hc(asia)
hc
plot(hc)
hc <- hc(asia)
plot(hc)
hc <- hc(asia)
hc <- hc(asia)
plot(hc)
hc <- hc(asia)
hc <- hc(asia)
plot(hc)
plot(hc)
hc
hc
bn(asia)
arcs(hc)
vstructs(hc)
plot(hc)
cpdag(hc)
hc
cpdag(hc)
cpdag(hc)
hc
cpdag(hc)
hc
plot(cpdag(hc))
plot(hc)
plot(cpdag(hc))
plot(hc)
plot(cpdag(hc))
hc
cpdag(hc)
all.equal(hc, cpdag(hc))
all.equal(hc, vstructs(hc))
all.equal(hc)
## hc starting with the empty graph, no edges.
hc <- hc(asia)
plot(hc)
arcs(hc)
all.equal(arcs(hc), arcs(hc))
arcs(hc)
vstructs(hc)
plot(hc)
rgraphviz.plot(hc)
graphviz.plot(hc)
plot(hc)
graphviz.plot(hc)
##plots it correctly
graphviz.plot(hc, layout=dot)
##plots it correctly
graphviz.plot(hc, layout="dot")
##plots it correctly
graphviz.plot(hc, layout="neato")
##plots it correctly
graphviz.plot(hc)
graphviz.compare(hc, cpdag(hc))
View(asia)
## So if we look at another HC with a different score:
hc.score <- hc(asia, score="loglik")
graphviz.compare(hc, hc.score)
graphviz.plot(hc.score)
## So if we look at another HC with a different score:
hc.score <- hc(asia, score="ebic")
graphviz.plot(hc.score)
graphviz.compare(hc, hc.score)
graphviz.plot(hc.score)
## So if we look at another HC with a different score:
hc.score <- hc(asia, score="bde")
graphviz.plot(hc.score)
graphviz.compare(hc, hc.score)
## So if we look at another HC with a different score:
hc.score <- hc(asia, score="bds")
graphviz.plot(hc.score)
graphviz.compare(hc, hc.score)
## So if we look at another HC with a different score:
hc.score <- hc(asia, score="loglik-g")
## So if we look at another HC with a different score:
hc.score <- hc(asia, score="aic")
graphviz.plot(hc.score)
graphviz.compare(hc, hc.score)
graphviz.plot(hc.score)
graphviz.compare(hc, hc.score)
##plots it correctly
graphviz.plot(hc)
graphviz.plot(hc.score)
graphviz.compare(hc, hc.score)
all.equal(hc, hc.score)
graphviz.plot(hc.score)
##plots it correctly
graphviz.plot(hc)
graphviz.plot(hc.score, layout="dot")
graphviz.plot(hc.score, layout="dot")
hc
hc.score
cpdag(hc.score)
##plots it correctly
graphviz.plot(hc)
arcs(hc)
graphviz.plot(hc.score, layout="dot")
arcs(hc.score)
graphviz.compare(hc, hc.score)
vstructs(hc.score)
##shows all the v-structures of the graph, ex. E->D<-B
vstructs(hc)
hc.restart <- hc(asia, restart=10)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
all.equal(hc, hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
hc.restart <- hc(asia, restart=10)
graphviz.plot(hc.restart)
graphviz.plot(hc.restart)
arcs(hc.restart)
vstructs.restart <- vstructs(hc.restart)
vs.restart <- vstructs(hc.restart)
all.equal(hc, hc.restart)
all.equal(vs.restart, vstrucs(hc))
all.equal(vs.restart, vstructs(hc))
all.equal(vs.restart, vstructs(hc.score))
hc.restart <- hc(asia, restart=100)
graphviz.plot(hc.restart)
all.equal(hc, hc.restart)
all.equal(vs.restart, vstructs(hc))
data("asia")
split <- round(nrow(asia) * 0.8)
data("asia")
split <- round(nrow(asia) * 0.8)
data <- asia[1:split,]
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
learn <- hc(data)
graphviz.plot(learn)
bn.fit(data)
bn.fit(struct)
source("C:/Users/ricka/TDDE15/Lab1/2.R")
bn.fit(struct)
pdag <- iamb(data)
pdag
graphviz.plot(pdag)
bn.fit(data)
graphviz.plot(hc.restart)
source("C:/Users/ricka/TDDE15/Lab1/1.R")
source("C:/Users/ricka/TDDE15/Lab1/2.R")
data("asia")
source("C:/Users/ricka/TDDE15/Lab1/2.R")
library(bnlearn)
library(Rgraphviz)
library(gRain)
data("asia")
n = dim(asia)[1]
set.seed(12345)
id = sample(1:n, floor(n*0.8))
data = asia[id,]
test = asia[-id,]
pdag <- hc(data)
##Learning the parameters:
fitted <- bn.fit(pdag, data, method="bayes")
##Compiling conditional probabilities
fitted.grain <- as.grain(fitted)
fitted.grain <- compile(fitted.grain)
##Initializing empyt vector for probabilities
s.scores <- c()
for (i in 1:nrow(test)) {
##Extract rows from test data and remove S-column
##to use as our states for the nodes in setEvidence
vector_from_row <- unlist(test[i,])
vector <- vector_from_row[-which(names(vector_from_row) == "S")]
object <- setEvidence(fitted.grain, nodes=c("A", "T", "L", "B", "E", "X", "D"),
states=as.character(vector))
query.fit <- querygrain(object, nodes=c("S"))
s.scores <- c(s.scores, ifelse(query.fit[["S"]][["yes"]] >= 0.5, "yes", "no"))
}
confusion.matrix <- confusionMatrix(as.factor(s.scores), reference=as.factor(test$S))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
true.fitted <- bn.fit(dag, data, method="bayes")
true.fitted.grain <- as.grain(true.fitted)
true.fitted.grain <- compile(true.fitted.grain)
true_scores <- c()
for (i in 1:nrow(test)) {
vector_from_row <- unlist(test[i,])
vector <- vector_from_row[-which(names(vector_from_row) == "S")]
true.object <- setEvidence(true.fitted.grain, nodes=c("A", "T", "L", "B", "E", "X", "D"),
states=as.character(vector))
true.query.fit <- querygrain(true.object, nodes=c("S"))
true_scores <- c(true_scores, ifelse(true.query.fit[["S"]][["yes"]] > 0.5, "yes", "no"))
}
true.confusion.matrix <- confusionMatrix(as.factor(true_scores), reference=as.factor(test$S))
library(caret)
data("asia")
n = dim(asia)[1]
set.seed(12345)
id = sample(1:n, floor(n*0.8))
data = asia[id,]
test = asia[-id,]
pdag <- hc(data)
##Learning the parameters:
fitted <- bn.fit(pdag, data, method="bayes")
##Compiling conditional probabilities
fitted.grain <- as.grain(fitted)
fitted.grain <- compile(fitted.grain)
##Initializing empyt vector for probabilities
s.scores <- c()
for (i in 1:nrow(test)) {
##Extract rows from test data and remove S-column
##to use as our states for the nodes in setEvidence
vector_from_row <- unlist(test[i,])
vector <- vector_from_row[-which(names(vector_from_row) == "S")]
object <- setEvidence(fitted.grain, nodes=c("A", "T", "L", "B", "E", "X", "D"),
states=as.character(vector))
query.fit <- querygrain(object, nodes=c("S"))
s.scores <- c(s.scores, ifelse(query.fit[["S"]][["yes"]] >= 0.5, "yes", "no"))
}
confusion.matrix <- confusionMatrix(as.factor(s.scores), reference=as.factor(test$S))
dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
true.fitted <- bn.fit(dag, data, method="bayes")
true.fitted.grain <- as.grain(true.fitted)
true.fitted.grain <- compile(true.fitted.grain)
true_scores <- c()
for (i in 1:nrow(test)) {
vector_from_row <- unlist(test[i,])
vector <- vector_from_row[-which(names(vector_from_row) == "S")]
true.object <- setEvidence(true.fitted.grain, nodes=c("A", "T", "L", "B", "E", "X", "D"),
states=as.character(vector))
true.query.fit <- querygrain(true.object, nodes=c("S"))
true_scores <- c(true_scores, ifelse(true.query.fit[["S"]][["yes"]] > 0.5, "yes", "no"))
}
true.confusion.matrix <- confusionMatrix(as.factor(true_scores), reference=as.factor(test$S))
?mb
mb.fitted <- mb(pdag)
mb.fitted <- mb(pdag, nodes="S")
mb.fitted <- mb(pdag, node="S")
mb.fitted
mb(dag, node="S")
vector_from_row <- unlist(test[1,])
unlist(test[1,])
test.prov <- test[['B','L']]
vector_from_row <- unlist(test[1,])
vector <- vector_from_row[c("B", "L")]
vector
as.character(vector)
mb.fitted
vector_from_row <- unlist(test[i,])
vector <- vector_from_row[c(mb.fitted)]
vector
mb.fitted <- mb(pdag, node="S")
mb.fitted
mb.scores <- c()
for (i in 1:nrow(test)) {
vector_from_row <- unlist(test[i,])
vector <- vector_from_row[c(mb.fitted)]
mb.object <- setEvidence(true.fitted.grain, nodes=c(mb.fitted),
states=as.character(vector))
mb.query.fit <- querygrain(mb.object, nodes=c("S"))
mb.scores <- c(mb.scores, ifelse(mb.query.fit[["S"]][["yes"]] > 0.5, "yes", "no"))
}
mb.confusion.matrix <- confusionMatrix(as.factor(mb.scores), reference=as.factor(test$S))
mb.confusion.matrix
mb.confusion.matrix
mb.confusion.matrix
dag <- empty.graph(c("A", "T", "L", "B", "E", "X", "D", "S"))
graphviz.plot(dag)
arc.set <- matrix(c("S", "A", "S", "T", "S", "L", "S", "B", "S", "E", "S", "X", "S", "D"),
ncol=2, byrow=TRUE, dimnames=list(NULL, c("from", "to")))
arc.set
e <- empty.graph(c("A", "T", "L", "B", "E", "X", "D", "S"))
graphviz.plot(dag)
e <- empty.graph(c("A", "T", "L", "B", "E", "X", "D", "S"))
graphviz.plot(dag)
graphviz.plot(e)
arc.set <- matrix(c("S", "A", "S", "T", "S", "L", "S", "B", "S", "E", "S", "X", "S", "D"),
ncol=2, byrow=TRUE, dimnames=list(NULL, c("from", "to")))
arc.set
arcs(e) <- arc.set
e
graphviz.plot(e)
##Learning the parameters:
fitted <- bn.fit(e, data, method="bayes")
type(e)
e
e <- empty.graph(c("A", "T", "L", "B", "E", "X", "D", "S"))
arc.set <- matrix(c("S", "A", "S", "T", "S", "L", "S", "B", "S", "E", "S", "X", "S", "D"),
ncol=2, byrow=TRUE, dimnames=list(NULL, c("from", "to")))
arcs(e) <- arc.set
##Learning the parameters:
fitted <- bn.fit(e, data, method="bayes")
data("asia")
n = dim(asia)[1]
set.seed(12345)
id = sample(1:n, floor(n*0.8))
data = asia[id,]
test = asia[-id,]
##Learning the parameters:
fitted <- bn.fit(e, data, method="bayes")
##Compiling conditional probabilities
fitted.grain <- as.grain(fitted)
fitted.grain <- compile(fitted.grain)
##Initializing empyt vector for probabilities
s.scores <- c()
for (i in 1:nrow(test)) {
##Extract rows from test data and remove S-column
##to use as our states for the nodes in setEvidence
vector_from_row <- unlist(test[i,])
vector <- vector_from_row[-which(names(vector_from_row) == "S")]
object <- setEvidence(fitted.grain, nodes=c("A", "T", "L", "B", "E", "X", "D"),
states=as.character(vector))
query.fit <- querygrain(object, nodes=c("S"))
s.scores <- c(s.scores, ifelse(query.fit[["S"]][["yes"]] >= 0.5, "yes", "no"))
}
confusion.matrix <- confusionMatrix(as.factor(s.scores), reference=as.factor(test$S))
confusion.matrix
